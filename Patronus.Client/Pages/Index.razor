@page "/"
@using Patronus.API.Client
@using Patronus.Api.Models
@using Refit
@inject IPatronusApi patronusApi
@inject IDialogService DialogService

<style>
    .mud-table-body .mud-table-row {
        cursor: pointer
    }

    .mud-table-row-disabled {
        cursor: wait !important;
        background-color: darkgray !important;
    }
</style>

<PageTitle>Contacts</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Contacts</MudText>

<MudTable Items="@Contacts" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" OnRowClick="RowClickEvent" LoadingProgressColor="Color.Info" T="ContactDto" RowClassFunc="DisableWhileLoading">
    <LoadingContent>
        <MudText Typo="Typo.body2" Class="mt-4 mud-text-secondary">Loading Data...</MudText>
    </LoadingContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>Phone</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Phone">@context.Phone</MudTd>
    </RowTemplate>
</MudTable>
<MudButton Variant="Variant.Filled" OnClick="LoadContacts">Refresh</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddContact">Add Contact</MudButton>

@code {
    public bool _loading;
    private List<ContactDto> Contacts = new List<ContactDto>();

    protected override async Task OnInitializedAsync()
    {
        await LoadContacts();
    }

    string DisableWhileLoading(ContactDto contact, int index)
    {
        if (_loading)
        {
            return "mud-table-row-disabled";
        }

        return "";
    }

    async Task RowClickEvent(TableRowClickEventArgs<ContactDto> tableRowClickEventArgs)
    {
        if (_loading) return;

        _loading = true;
        var parameters = new DialogParameters { ["contact"] = tableRowClickEventArgs.Item };
        var dialog = DialogService.Show<Dialog>("Contact", parameters);
        var result = await dialog.Result;

        await LoadContacts();
        _loading = false;
    }

    async Task LoadContacts()
    {
        _loading = true;

        try
        {
            var result = await patronusApi.GetContactsAsync(new ContactSearchDto());
            Contacts = result.Data;

            await Task.Delay(1500);
            _loading = false;
        } 
        catch(ApiException)
        {
            _loading = false;
        }
    }

    async Task AddContact()
    {
        _loading = true;

        var parameters = new DialogParameters { ["contact"] = new ContactDto() };
        var dialog = DialogService.Show<Dialog>("Contact", parameters);
        var result = await dialog.Result;

        await LoadContacts();
        _loading = false;
    }

}
